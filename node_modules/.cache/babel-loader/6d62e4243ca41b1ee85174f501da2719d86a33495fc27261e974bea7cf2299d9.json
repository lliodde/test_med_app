{"ast":null,"code":"import _objectSpread from\"/home/project/test_med_app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useEffect,useState,useCallback,createElement as _createElement}from'react';import'./InstantConsultation.css';import{useNavigate,useSearchParams}from'react-router-dom';import FindDoctorSearchIC from'./FindDoctorSearchIC/FindDoctorSearchIC';import DoctorCardIC from'./DoctorCardIC/DoctorCardIC';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const InstantConsultation=()=>{const[searchParams,setSearchParams]=useSearchParams();const[allDoctors,setAllDoctors]=useState([]);const[filteredDoctors,setFilteredDoctors]=useState([]);const navigate=useNavigate();// 1. Fetch all doctors once when the component first loads\nuseEffect(()=>{fetch('https://api.npoint.io/9a5543d36f1460da2f63').then(res=>res.json()).then(data=>{setAllDoctors(data);}).catch(err=>console.log(err));},[]);// Empty array means this runs only once\n// 2. This effect runs whenever the list of all doctors or the URL's search query changes\nuseEffect(()=>{const speciality=searchParams.get('speciality');if(speciality){const filtered=allDoctors.filter(doctor=>doctor.speciality.toLowerCase().includes(speciality.toLowerCase()));setFilteredDoctors(filtered);}else{setFilteredDoctors([]);// If no speciality, show no doctors until searched\n}},[searchParams,allDoctors]);// 3. This function is passed to the search component. It now just updates the URL.\nconst handleSearch=speciality=>{setSearchParams({speciality:speciality});};return/*#__PURE__*/_jsx(\"center\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"searchpage-container\",children:[/*#__PURE__*/_jsx(FindDoctorSearchIC,{onSearch:handleSearch}),/*#__PURE__*/_jsx(\"div\",{className:\"search-results-container\",children:searchParams.get('speciality')&&/*#__PURE__*/_jsxs(\"center\",{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[filteredDoctors.length,\" doctors found\"]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Book appointments with minimum wait-time & verified doctor details\"}),filteredDoctors.length>0?filteredDoctors.map(doctor=>/*#__PURE__*/_createElement(DoctorCardIC,_objectSpread(_objectSpread({className:\"doctorcard\"},doctor),{},{key:doctor.name}))):/*#__PURE__*/_jsx(\"p\",{children:\"No doctors found for this specialty.\"})]})})]})});};export default InstantConsultation;","map":{"version":3,"names":["React","useEffect","useState","useCallback","createElement","_createElement","useNavigate","useSearchParams","FindDoctorSearchIC","DoctorCardIC","jsx","_jsx","jsxs","_jsxs","InstantConsultation","searchParams","setSearchParams","allDoctors","setAllDoctors","filteredDoctors","setFilteredDoctors","navigate","fetch","then","res","json","data","catch","err","console","log","speciality","get","filtered","filter","doctor","toLowerCase","includes","handleSearch","children","className","onSearch","length","map","_objectSpread","key","name"],"sources":["/home/project/test_med_app/src/Components/InstantConsultation/InstantConsultation.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport './InstantConsultation.css';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport FindDoctorSearchIC from './FindDoctorSearchIC/FindDoctorSearchIC';\r\nimport DoctorCardIC from './DoctorCardIC/DoctorCardIC';\r\n\r\nconst InstantConsultation = () => {\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n    const [allDoctors, setAllDoctors] = useState([]);\r\n    const [filteredDoctors, setFilteredDoctors] = useState([]);\r\n    const navigate = useNavigate();\r\n\r\n    // 1. Fetch all doctors once when the component first loads\r\n    useEffect(() => {\r\n        fetch('https://api.npoint.io/9a5543d36f1460da2f63')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setAllDoctors(data);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, []); // Empty array means this runs only once\r\n\r\n    // 2. This effect runs whenever the list of all doctors or the URL's search query changes\r\n    useEffect(() => {\r\n        const speciality = searchParams.get('speciality');\r\n        if (speciality) {\r\n            const filtered = allDoctors.filter(doctor =>\r\n                doctor.speciality.toLowerCase().includes(speciality.toLowerCase())\r\n            );\r\n            setFilteredDoctors(filtered);\r\n        } else {\r\n            setFilteredDoctors([]); // If no speciality, show no doctors until searched\r\n        }\r\n    }, [searchParams, allDoctors]);\r\n\r\n    // 3. This function is passed to the search component. It now just updates the URL.\r\n    const handleSearch = (speciality) => {\r\n        setSearchParams({ speciality: speciality });\r\n    };\r\n\r\n    return (\r\n        <center>\r\n            <div className=\"searchpage-container\">\r\n                <FindDoctorSearchIC onSearch={handleSearch} />\r\n                <div className=\"search-results-container\">\r\n                    {/* Only show results if a search has been performed */}\r\n                    {searchParams.get('speciality') && (\r\n                        <center>\r\n                            <h2>{filteredDoctors.length} doctors found</h2>\r\n                            <h3>Book appointments with minimum wait-time & verified doctor details</h3>\r\n                            {filteredDoctors.length > 0 ? (\r\n                                filteredDoctors.map(doctor => <DoctorCardIC className=\"doctorcard\" {...doctor} key={doctor.name} />)\r\n                            ) : (\r\n                                <p>No doctors found for this specialty.</p>\r\n                            )}\r\n                        </center>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </center>\r\n    );\r\n}\r\n\r\nexport default InstantConsultation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}